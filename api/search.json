[{"id":"b9663f58f18133b35bfe243f3e916a80","title":"Hello World","content":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub.\nQuick StartCreate a new post$ hexo new \"My New Post\"\n\nMore info: Writing\nRun server$ hexo server\n\nMore info: Server\nGenerate static files$ hexo generate\n\nMore info: Generating\nDeploy to remote sites$ hexo deploy\n\nMore info: Deployment\n","slug":"hello-world","date":"2021-12-18T11:17:57.380Z","categories_index":"","tags_index":"","author_index":"Superl"},{"id":"c0ab05795eceadff151c5fb0906fc98c","title":"PHP中的phpize","content":"什么是phpizephpize是一个运行脚本，主要作用是检测php的环境还有就是在特定的目录生成相应的configure文件,这样makeinstall之后，生成的.so文件才会自动加载到php扩展目录下面。\n为什么使用phpize在使用php的过程中，我们常常需要去添加一些PHP扩展库。但是重新对php进行编译是比较蛮烦的，所以这时候我们可以使用phpize对php进行添加扩展。并且phpize编译的扩展库可以随时启用或停用，比较灵活。\n如何使用phpize\nwget extension.tar.gz下载相应的扩展包并解压。\ncd extension/切换到扩展extension的目录中\n/php/bin/phpize 运行php安装目录下的phpize文件，这时候会在extension目录下生成相应的configure文件。\n/configure –with-php-config=/php/bin/php-config 运行配置，如果你的服务器上只是装了一个版本的php则不需要添加–with-php-config 。后面的参数只是为了告诉phpize要建立基于哪个版本的扩展。\nmake &amp;&amp; make install 编译模块编译好模块之后，需要让php启用它。在php.ini文件中加入把extension.so开启即可。重启php服务。\n\n","slug":"PHP中的phpize","date":"2021-12-07T06:14:40.000Z","categories_index":"PHP","tags_index":"PHP,PHP拓展","author_index":"Superl"},{"id":"6e78dc0762814718dbee5999dd72dda3","title":"MongoDB 基础","content":"MongoDB类比Mysql\n\n\n\n\n\n\n\n\nMongoDB是非关系型数据库当中最像关系型数据库的，所以我们通过它与关系型数据库的对比，来了解下它的概念。\n数据库操作创建数据库使用 use 命令去创建数据库，当插入第一条数据时会创建数据库。例如创建一个 test 数据库\n&gt; use test\nswitched to db test\n&gt; db.article.insert(&#123;&quot;name&quot;:&quot;MongoDB 教程&quot;&#125;)\nWriteResult(&#123; &quot;nInserted&quot; : 1 &#125;)\n&gt; show dbs\nadmin   0.000GB\nconfig  0.000GB\nlocal   0.000GB\ntest    0.000GB\n删除数据库删除数据库，使用db对象中的dropDatabase()方法来删除\n&gt; db.dropDatabase()\n&#123; &quot;dropped&quot; : &quot;test&quot;, &quot;ok&quot; : 1 &#125;\n&gt; show dbs\nadmin   0.000GB\nconfig  0.000GB\nlocal   0.000GB\n集合操作创建集合使用db对象中的createCollection()方法来创建集合，例如创建一个article集合\n&gt; use test\nswitched to db test\n&gt; db.createCollection(&quot;article&quot;)\n&#123; &quot;ok&quot; : 1 &#125;\n&gt; show collections\narticle\n删除集合使用collection对象的drop()方法来删除集合，例如删除一个article集合\n&gt; db.article.drop()\ntrue\n&gt; show collections\n文档操作插入文档MongoDB通过collection对象的insert()方法向集合中插入文档，语法如下\ndb.collection.insert(document)\n使用collection对象的insert()方法来插入文档，例如插入一个article文档,例如:\ndb.article.insert(&#123;title: &#39;MongoDB 教程&#39;, \n    description: &#39;MongoDB 是一个 Nosql 数据库&#39;,\n    by: &#39;Andy&#39;,\n    url: &#39;https:&#x2F;&#x2F;www.mongodb.com&#x2F;&#39;,\n    tags: [&#39;mongodb&#39;, &#39;database&#39;, &#39;NoSQL&#39;],\n    likes: 100\n&#125;)\n插入文档使用collection对象的find()方法可以获取文档，例如获取所有的article文档\n&gt; db.article.find(&#123;&#125;)\n结果如下\n&#123;\n    &quot;_id&quot; : ObjectId(&quot;5e9943661379a112845e4056&quot;),\n    &quot;title&quot; : &quot;MongoDB 教程&quot;,\n    &quot;description&quot; : &quot;MongoDB 是一个 Nosql 数据库&quot;,\n    &quot;by&quot; : &quot;Andy&quot;,\n    &quot;url&quot; : &quot;https:&#x2F;&#x2F;www.mongodb.com&#x2F;&quot;,\n    &quot;tags&quot; : [ \n        &quot;mongodb&quot;, \n        &quot;database&quot;, \n        &quot;NoSQL&quot;\n    ],\n    &quot;likes&quot; : 100.0\n&#125;\n\n更新文档删除文档查询文档其他操作limit 和 skip 操作排序索引聚合正则表达式","slug":"MongoDB-基础","date":"2021-11-26T02:58:53.000Z","categories_index":"MongoDB","tags_index":"数据库,MongoDB","author_index":"Superl"},{"id":"52e6201046d1395d4d9ffbd6d8b9abdf","title":"VUE 学习笔记","content":"VUE学习之新的开始数据与方法\n\n\n\n\n\n\n\n\n当一个 Vue 实例被创建时，它将 data 对象中的所有的 property 加入到 Vue 的响应式系统中。当这些 property 的值发生改变时，视图将会产生“响应”，即匹配更新为新的值。\nvar vm = new Vue(&#123;\n  data: &#123;\n      a : 1\n  &#125;\n&#125;)\n// 获得这个实例上的 property\n// 返回源数据中对应的字段\nvm.a == data.a // => true\n\n\n\n\n\n\n\n\n\n当这些数据改变时，视图会进行重渲染。值得注意的是只有当实例被创建时就已经存在于 data 中的 property 才是响应式的。也就是说如果你添加一个新的 property，比如：\nvm.b = 'hi'\n\n\n\n\n\n\n\n\n\n那么对 b 的改动将不会触发任何视图的更新。如果你知道你会在晚些时候需要一个 property，但是一开始它为空或不存在，那么你仅需要设置一些初始值。比如：\ndata: &#123;\n  a: '',\n  b: 0,\n&#125;\n\n\n\n\n\n\n\n\n\n这里唯一的例外是使用 Object.freeze()，这会阻止修改现有的 property，也意味着响应系统无法再追踪变化。\nvar obj = &#123;\n  foo: 'bar'\n&#125;\n\nObject.freeze(obj)\n\nnew Vue(&#123;\n  el: '#app',\n  data: obj\n&#125;)\n&lt;div id=\"app\">\n  &lt;p>&#123;&#123; foo &#125;&#125;&lt;/p>\n  &lt;!-- 这里的 `foo` 不会更新！ -->\n  &lt;button v-on:click=\"foo = 'baz'\">Change it&lt;/button>\n&lt;/div>\n\n\n\n\n\n\n\n\n\n\n除了数据 property，Vue 实例还暴露了一些有用的实例 property 与方法。它们都有前缀 $，以便与用户定义的 property 区分开来。例如：\nvar data = &#123; a: 1 &#125;\nvar vm = new Vue(&#123;\n  el: '#example',\n  data: data\n&#125;)\n\nvm.$data === data // => true\nvm.$el === document.getElementById('example') // => true\n\n// $watch 是一个实例方法\nvm.$watch('a', function (newValue, oldValue) &#123;\n  // 这个回调将在 `vm.a` 改变后调用\n&#125;)\n以后你可以在 API 参考中查阅到完整的实例 property 和方法的列表。\n实例生命周期钩子","slug":"VUE-学习笔记","date":"2021-12-10T11:24:30.000Z","categories_index":"","tags_index":"前端,VUE","author_index":"Superl"},{"id":"c5ab4757a6b1b541d7504708544a53c3","title":"重装 macOS Monterey","content":"记第一次重装 macOS原因由于离职要归还公司的 macbook 便决定清除这台电脑上的所有数据（我刚拿到的时候也是被清除过的），由于没有经验，就开始百度，大概得到如下过程：备份 -&gt; 关机下comand+r -&gt; 格式化磁盘 -&gt; 重装系统。备份这一步当然直接跳过，既往不念，然后就是擦除磁盘数据，这个环节我感觉我是有操作失误，本来只要擦除一个磁盘的，然后我感觉我擦除了两个磁盘（我也不知道是一个擦除了两次还是两个），然后我就寻思，是不是可以重启了，然后关机重启，果然连开机都不行了。这个时候我知道我要重装系统了，就有了下面的问题。\n问题1. 我先关机command + r清除磁盘\n2. 然后我重启发现电脑无法启动\n3. 然后关机command + r，选择重新安装macOs\n4. 然后点击继续，电脑提示“为了下载并恢复macOS，将向Apple验证您的电脑是否副歌安装条件”，点击继续\n然后报错“恢复服务器上的安装信息已被破坏”\n就是这样，我无法通过mac自身的网络重装这种最简单的方法恢复在百度和谷歌之后，我寻得了一些看似可行的方案\n\n同步系统时间为苹果服务器时间\n同步系统时间为2016年的某个时间\n执行一段命令，大概就是允许所有安装程序安装的意思吧\n\n我尝试了上面的方法，1和2都试了，结果是2比1靠谱一些，为什么会有这样的结果，我也总结了下，大概是要安装的那个系统是很多年前的了，所以应该把时间往前设置，但是还是无法重装上。\n当然，我又去问了国光师傅，也没有得到很好的解决方案，但是国光师傅提供了苹果镜像安装的方法网址给我，于是就开始重装\n重装首先，要备好 16GB+ 的硬盘一个，然后就开始了我起初是想装 big sur 的，但是我没找到下载的地方，于是就只能在我自己的电脑上检测更新，找到了最新的 Monterey 下载下来。这里我是踩坑了，起初我以为只要执行这个命令就可以做好启动盘：\nsudo &#x2F;Applications&#x2F;Install\\ macOS\\ Monterey.app&#x2F;Contents&#x2F;Resources&#x2F;createinstallmedia --volume &#x2F;Volumes&#x2F;USB01\n这里的 USB01 是前置条件，我先格式化了 U 盘，具体教程就是抹除 然后选择对应的格式就行，但是我执行这个命令总是提示找不到这个 createinstallmedia 命令，这时我就开始认真看这个命令，我发现他是一个镜像里面的某个应用，然后就有了我上面下载镜像的步骤，下载好了镜像，然后执行上面的命令，十分顺利，大概了20分钟就好了\n然后启动盘好了就开始安装，首先还是关机状态下，开机 + option，然后选择 Monterey Install 进入，然后就选择磁盘，开始安装接下来就是等待的过程\n收获\n我发现如果我在重置系统的时候，多收集一些靠谱的资料可能就不会这么麻烦，比如说上 B站 找视频教程，是个很好的选择，或者上谷歌，而且一定要知道自己操做的意义，就是你做这件事是为了什么。\n解决问题的能力，先找资料，然后再带着问题和解决过程咨询大佬，大佬只能指点你，具体自己认真去操作。\n当你执行一条命令的时候你最好知道这条命令是要做什么。\n\n","slug":"重装-macOS-Monterey","date":"2021-12-09T09:07:52.000Z","categories_index":"MAC","tags_index":"MAC","author_index":"Superl"},{"id":"06d0360bd399c5a6c8067efdcb83491c","title":"Golang 简单的 Websocket","content":"实现一个简单的 websocketwebsocket 有什么用长连接，只要一次连接就可以n次交互，不同于 http 每次都要发送冗长的报文。服务端可以主动给客户端推送消息更新数据。\nGolang实现package main\n\nimport (\n\t\"fmt\"\n\t\"golang.org/x/net/websocket\"\n\t\"log\"\n\t\"net/http\"\n)\n\nfunc ping(ws *websocket.Conn) &#123;\n\tdefer func() &#123; _ = ws.Close() &#125;()\n\tfor &#123;\n\t\tmsg := make([]byte, 512)\n\t\tn, err := ws.Read(msg)\n\t\tif err != nil || n == 0 &#123;\n\t\t\t_ = ws.Close()\n\t\t\tbreak\n\t\t&#125;\n\t\tfmt.Printf(\"Receive: %s\\n\", msg[:n])\n\n\t\tsendMsg := \"pong：\" + string(msg[:n])\n\t\t_, err = ws.Write([]byte(sendMsg))\n\t\tif err != nil &#123;\n\t\t\tlog.Fatal(err)\n\t\t&#125;\n\t\tfmt.Printf(\"Send: %s\\n\", sendMsg)\n\t&#125;\n&#125;\n\nfunc main() &#123;\n\thttp.Handle(\"/ping\", websocket.Handler(ping))\n\tfmt.Println(\"开始监听9527端口...\")\n\terr := http.ListenAndServe(\":9527\", nil)\n\tif err != nil &#123;\n\t\tlog.Fatal(err)\n\t&#125;\n&#125;\n\n注意事项\n在客户端断开连接的时候收到一个空消息，要进行处理,不然一断开连接程序就挂了msg := make([]byte, 512)\nn, err := ws.Read(msg)\nif err != nil || n == 0 &#123;\n    _ = ws.Close()\n    break\n&#125;\n用死循环监听客户端发送过来的消息,不然一次就只能回复一条消息for &#123;\n    msg := make([]byte, 512)\n    n, err := ws.Read(msg)\n    if err != nil || n == 0 &#123;\n        _ = ws.Close()\n        break\n    &#125;\n    fmt.Printf(\"Receive: %s\\n\", msg[:n])\n\n    sendMsg := \"pong：\" + string(msg[:n])\n    _, err = ws.Write([]byte(sendMsg))\n    if err != nil &#123;\n        log.Fatal(err)\n    &#125;\n    fmt.Printf(\"Send: %s\\n\", sendMsg)\n&#125;\n可以去看下 golang.org/x/net/websocket 这个库提供的 demo\n\n","slug":"Golang-简单的-Websocket","date":"2021-12-08T09:11:56.000Z","categories_index":"Golang","tags_index":"Golang,websocket","author_index":"Superl"},{"id":"bc567916c4dc0d8169bd26d18e348d36","title":"test","content":"this is a test","slug":"test","date":"2021-11-25T07:52:57.000Z","categories_index":"","tags_index":"","author_index":"Superl"}]